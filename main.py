from data.provedor_dados_fundamentus import ProvedorDadosFundamentus
from metodologias.analisador_graham import AnalisadorGraham
from metodologias.analisador_barsi import AnalisadorBarsi
from metodologias.analisador_pl_descontado import AnalisadorPLDescontado
from metodologias.analisador_fundamentalista_wsm import AnalisadorFundamentalistaWSM, exibir_estrutura_pesos
from visualizacao.gerador_visualizacoes import GeradorVisualizacoes
from visualizacao.gerador_visualizacoes_wsm import GeradorVisualizacoesWSM
import pandas as pd
import argparse
import matplotlib.pyplot as plt
import os
from datetime import datetime


class SistemaAnaliseFundamentalista:
    """
    Sistema principal de an√°lise fundamentalista de a√ß√µes
    Integra m√∫ltiplas metodologias de valuation e gera relat√≥rios completos
    """

    def __init__(self):
        self.provedor_dados = ProvedorDadosFundamentus()
        self._configurar_ambiente()

    def _configurar_ambiente(self):
        """Configura os diret√≥rios e ambiente necess√°rio para a an√°lise"""
        diretorios_necessarios = [
            "output/dados/analises",
            "output/dados/cache",
            "output/graficos"
        ]

        for diretorio in diretorios_necessarios:
            os.makedirs(diretorio, exist_ok=True)

        print("‚úÖ Ambiente configurado com sucesso")

    def _processar_argumentos(self):
        """Processa e valida os argumentos da linha de comando"""
        analisador_argumentos = argparse.ArgumentParser(
            description='Sistema de An√°lise Fundamentalista - Integra√ß√£o Multi-Metodologias'
        )

        analisador_argumentos.add_argument(
            '--atualizar-dados',
            action='store_true',
            help='For√ßar atualiza√ß√£o dos dados (ignorar cache)'
        )

        analisador_argumentos.add_argument(
            '--apenas-visualizacoes',
            action='store_true',
            help='Apenas gerar visualiza√ß√µes (usar dados existentes)'
        )

        analisador_argumentos.add_argument(
            '--quantidade-rankings',
            type=int,
            default=15,
            help='N√∫mero de a√ß√µes no ranking final (padr√£o: 15)'
        )

        analisador_argumentos.add_argument(
            '--exportar-dados',
            action='store_true',
            help='Exportar dados completos para Excel'
        )

        return analisador_argumentos.parse_args()

    def _carregar_lista_exclusoes(self, caminho_arquivo='config/lista_exclusoes.txt'):
        """
        Carrega lista de tickers para exclus√£o da an√°lise

        Args:
            caminho_arquivo (str): Caminho para o arquivo de exclus√µes

        Returns:
            list: Lista de tickers a serem exclu√≠dos
        """
        tickers_excluir = []

        try:
            with open(caminho_arquivo, 'r', encoding='utf-8') as arquivo:
                for linha in arquivo:
                    linha = linha.strip()
                    # Ignora linhas vazias e coment√°rios
                    if linha and not linha.startswith('#'):
                        tickers_excluir.append(linha.upper())

            print(f"üìã Lista de exclus√µes carregada: {len(tickers_excluir)} tickers")
            return tickers_excluir

        except FileNotFoundError:
            print(f"‚ö†Ô∏è Arquivo de exclus√µes n√£o encontrado: {caminho_arquivo}")
            print("   Nenhum ticker ser√° exclu√≠do da an√°lise")
            return []
        except Exception as erro:
            print(f"‚ùå Erro ao carregar lista de exclus√µes: {erro}")
            return []

    def _aplicar_metodologias_valuation(self, dataframe_original):
        """
        Aplica m√∫ltiplas metodologias de valuation ao DataFrame

        Args:
            dataframe_original (pd.DataFrame): DataFrame com dados fundamentais

        Returns:
            pd.DataFrame: DataFrame com colunas de valuation adicionadas
        """
        print("\nüîç Aplicando metodologias de valuation...")

        dataframe_analise = dataframe_original.copy()

        # Inicializar colunas de valuation
        colunas_valuation = [
            'preco_teto_graham', 'margem_seguranca_graham',
            'preco_teto_barsi', 'margem_seguranca_barsi',
            'preco_alvo_pl_setor', 'margem_seguranca_pl_setor'
        ]

        for coluna in colunas_valuation:
            dataframe_analise[coluna] = None

        total_ativos = len(dataframe_analise)
        ativos_processados = 0

        for indice, linha in dataframe_analise.iterrows():
            try:
                ticker = linha.get('ticker')
                preco_atual = linha.get('Cotacao')
                lucro_por_acao = linha.get('LPA')
                valor_patrimonial_por_acao = linha.get('VPA')
                payout_medio = linha.get('Payout_Medio')
                pl_medio_setor = linha.get('PL_Medio_Subsetor')

                # Converter para num√©rico
                preco_atual_numerico = pd.to_numeric(preco_atual, errors='coerce')
                lpa_numerico = pd.to_numeric(lucro_por_acao, errors='coerce')
                vpa_numerico = pd.to_numeric(valor_patrimonial_por_acao, errors='coerce')
                payout_numerico = pd.to_numeric(payout_medio, errors='coerce')
                pl_setor_numerico = pd.to_numeric(pl_medio_setor, errors='coerce')

                # Aplicar metodologias
                self._aplicar_metodologia_graham(
                    dataframe_analise, indice, ticker,
                    preco_atual_numerico, lpa_numerico, vpa_numerico
                )

                self._aplicar_metodologia_barsi(
                    dataframe_analise, indice, ticker,
                    preco_atual_numerico, lpa_numerico, payout_numerico
                )

                self._aplicar_metodologia_pl_descontado(
                    dataframe_analise, indice, ticker,
                    preco_atual_numerico, lpa_numerico, pl_setor_numerico
                )

                ativos_processados += 1
                if ativos_processados % 50 == 0:
                    print(f"   üìä Processados {ativos_processados}/{total_ativos} ativos...")

            except Exception as erro:
                print(f"   ‚ö†Ô∏è Erro ao processar {linha.get('ticker', 'Desconhecido')}: {erro}")
                continue

        # Garantir tipos num√©ricos nas colunas de margem
        colunas_margem = ['margem_seguranca_graham', 'margem_seguranca_barsi', 'margem_seguranca_pl_setor']
        for coluna in colunas_margem:
            dataframe_analise[coluna] = pd.to_numeric(dataframe_analise[coluna], errors='coerce')

        print(f"‚úÖ Metodologias aplicadas: {ativos_processados}/{total_ativos} ativos processados")
        return dataframe_analise

    def _aplicar_metodologia_graham(self, dataframe, indice, ticker, preco_atual, lpa, vpa):
        """Aplica a metodologia de Benjamin Graham para valuation"""
        if (pd.notna(preco_atual) and pd.notna(lpa) and pd.notna(vpa) and
                lpa > 0 and vpa > 0 and preco_atual > 0):

            analisador_graham = AnalisadorGraham(ticker, preco_atual, lpa, vpa)
            preco_teto_graham = analisador_graham.calcular_numero_graham()
            margem_seguranca = analisador_graham.calcular_margem_seguranca()

            if preco_teto_graham is not None:
                dataframe.loc[indice, 'preco_teto_graham'] = float(preco_teto_graham)
            if margem_seguranca is not None:
                dataframe.loc[indice, 'margem_seguranca_graham'] = float(margem_seguranca['percentual'])

    def _aplicar_metodologia_barsi(self, dataframe, indice, ticker, preco_atual, lpa, payout):
        """Aplica a metodologia de Luiz Barsi para valuation"""
        if (pd.notna(preco_atual) and pd.notna(lpa) and pd.notna(payout) and
                lpa > 0 and preco_atual > 0 and payout > 0):

            analisador_barsi = AnalisadorBarsi(ticker, preco_atual, lpa, payout)
            preco_teto_barsi = analisador_barsi.calcular_preco_teto()
            margem_seguranca = analisador_barsi.calcular_margem_seguranca()

            if preco_teto_barsi is not None:
                dataframe.loc[indice, 'preco_teto_barsi'] = float(preco_teto_barsi)
            if margem_seguranca is not None:
                dataframe.loc[indice, 'margem_seguranca_barsi'] = float(margem_seguranca['percentual'])

    def _aplicar_metodologia_pl_descontado(self, dataframe, indice, ticker, preco_atual, lpa, pl_medio_setor):
        """Aplica metodologia de P/L descontado em rela√ß√£o ao setor"""
        if (pd.notna(preco_atual) and pd.notna(lpa) and pd.notna(pl_medio_setor) and
                lpa > 0 and preco_atual > 0):

            analisador_pl_desc = AnalisadorPLDescontado(ticker, preco_atual, lpa, pl_medio_setor)
            resultado_analise = analisador_pl_desc.executar_analise_completa()

            if resultado_analise['preco_alvo'] is not None:
                dataframe.loc[indice, 'preco_alvo_pl_setor'] = float(resultado_analise['preco_alvo'])
            if resultado_analise['margem_seguranca'] is not None:
                dataframe.loc[indice, 'margem_seguranca_pl_setor'] = float(
                    resultado_analise['margem_seguranca']['percentual'])

    def _executar_analise_fundamentalista_wsm(self, dataframe, quantidade_rankings):
        """
        Executa an√°lise fundamentalista completa usando Weighted Scoring Model (WSM)

        Args:
            dataframe (pd.DataFrame): DataFrame com dados fundamentais
            quantidade_rankings (int): N√∫mero de empresas no ranking final

        Returns:
            tuple: (DataFrame completo com scores, DataFrame do top ranking)
        """
        print("\n" + "=" * 70)
        print("üéØ AN√ÅLISE FUNDAMENTALISTA COMPLETA - WSM")
        print("=" * 70)

        # Exibir estrutura de pesos utilizada
        dataframe_pesos = exibir_estrutura_pesos()
        print("\nüìä ESTRUTURA DE PESOS DA AN√ÅLISE:")
        print(dataframe_pesos.to_string(index=False))

        # Executar an√°lise WSM
        analisador_wsm = AnalisadorFundamentalistaWSM(dataframe)
        resultados_completos = analisador_wsm.executar_analise()

        # Preparar ranking das melhores empresas
        top_empresas = self._preparar_ranking_empresas(resultados_completos, quantidade_rankings)

        # Exibir resultados
        self._apresentar_resultados_analise(resultados_completos, top_empresas)

        return resultados_completos, top_empresas

    def _preparar_ranking_empresas(self, resultados_analise, quantidade_rankings):
        """
        Prepara ranking das melhores empresas baseado no score WSM

        Args:
            resultados_analise (pd.DataFrame): DataFrame com resultados completos
            quantidade_rankings (int): N√∫mero de empresas no ranking

        Returns:
            pd.DataFrame: DataFrame com top empresas formatadas
        """
        colunas_ranking = [
            'empresa', 'ticker', 'subsetor', 'score_wsm', 'score_wsm_penalidade',
            'margem_graham', 'margem_barsi', 'preco_lucro', 'roe'
        ]

        ranking_empresas = resultados_analise[colunas_ranking].head(quantidade_rankings)

        # Formatar valores num√©ricos
        colunas_numericas = ['score_wsm', 'score_wsm_penalidade', 'margem_graham', 'margem_barsi', 'preco_lucro', 'roe']
        for coluna in colunas_numericas:
            ranking_empresas[coluna] = ranking_empresas[coluna].round(2)

        return ranking_empresas

    def _apresentar_resultados_analise(self, resultados_completos, ranking_empresas):
        """
        Apresenta resultados formatados da an√°lise

        Args:
            resultados_completos (pd.DataFrame): DataFrame com todos os resultados
            ranking_empresas (pd.DataFrame): DataFrame com ranking das melhores
        """
        print(f"\nüèÜ TOP {len(ranking_empresas)} EMPRESAS - RANKING WSM:")
        print("-" * 80)
        print(ranking_empresas.to_string(index=False))
        print("-" * 80)

        # Estat√≠sticas da an√°lise
        score_wsm = resultados_completos['score_wsm']
        print(f"\nüìà ESTAT√çSTICAS DA AN√ÅLISE:")
        print(f"   ‚Ä¢ Total de empresas analisadas: {len(resultados_completos):,}")
        print(f"   ‚Ä¢ Score WSM m√©dio: {score_wsm.mean():.2f}")
        print(f"   ‚Ä¢ Score WSM m√°ximo: {score_wsm.max():.2f}")
        print(f"   ‚Ä¢ Score WSM m√≠nimo: {score_wsm.min():.2f}")
        print(f"   ‚Ä¢ Desvio padr√£o: {score_wsm.std():.2f}")

    def _gerar_visualizacoes_completas(self, dataframe_visualizacao, quantidade_rankings,
                                       modo_apenas_visualizacoes=False):
        """
        Gera todas as visualiza√ß√µes e relat√≥rios da an√°lise

        Args:
            dataframe_visualizacao (pd.DataFrame): DataFrame preparado para visualiza√ß√£o
            quantidade_rankings (int): N√∫mero de empresas nos rankings visuais
            modo_apenas_visualizacoes (bool): Modo apenas gera√ß√£o de visualiza√ß√µes

        Returns:
            list: Lista de figuras geradas
        """
        print("\nüé® Gerando visualiza√ß√µes e relat√≥rios...")

        figuras_geradas = []
        timestamp_analise = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Gerar visualiza√ß√µes WSM
        if 'score_wsm' in dataframe_visualizacao.columns:
            gerador_wsm = GeradorVisualizacoesWSM(dataframe_visualizacao)
            figuras_wsm = gerador_wsm.gerar_relatorio_completo(
                top_empresas=quantidade_rankings,
                caminho_salvamento=f"output/graficos/wsm_truncado_completo_{timestamp_analise}",
                penalidade=False
            )
            figuras_geradas.extend(figuras_wsm)

            figuras_wsm_penalidade = gerador_wsm.gerar_relatorio_completo(
                top_empresas=quantidade_rankings,
                caminho_salvamento=f"output/graficos/wsm_penalizado_completo_{timestamp_analise}",
                penalidade=True
            )
            figuras_geradas.extend(figuras_wsm_penalidade)

            # Salvar resultados completos
            self._exportar_resultados_completos(
                dataframe_visualizacao,
                f"output/dados/analises/resultados_wsm_completo_{timestamp_analise}.csv"
            )
        else:
            print("‚ö†Ô∏è Coluna 'score_wsm' n√£o encontrada para gera√ß√£o de gr√°ficos WSM")

        # Gerar visualiza√ß√µes das metodologias tradicionais
        if not modo_apenas_visualizacoes:
            print("\nüìä Gerando visualiza√ß√µes das metodologias tradicionais...")

            colunas_necessarias = ['margem_seguranca_graham', 'margem_seguranca_barsi', 'margem_seguranca_pl_setor']
            colunas_disponiveis = [col for col in colunas_necessarias if col in dataframe_visualizacao.columns]

            if len(colunas_disponiveis) == len(colunas_necessarias):
                try:
                    gerador_visualizacoes = GeradorVisualizacoes(dataframe_visualizacao)
                    gerador_visualizacoes.gerar_relatorio_completo(
                        top_empresas=quantidade_rankings
                    )
                except Exception as erro:
                    print(f"‚ö†Ô∏è Erro ao gerar visualiza√ß√µes tradicionais: {erro}")
            else:
                print(
                    f"‚ö†Ô∏è Metodologias tradicionais: {len(colunas_disponiveis)}/{len(colunas_necessarias)} colunas dispon√≠veis")

        return figuras_geradas

    def _exportar_resultados_completos(self, dataframe, caminho_arquivo):
        """
        Exporta resultados completos para arquivo CSV

        Args:
            dataframe (pd.DataFrame): DataFrame com resultados
            caminho_arquivo (str): Caminho para salvar o arquivo
        """
        try:
            dataframe.to_csv(caminho_arquivo, index=False, encoding='utf-8')
            print(f"üíæ Resultados exportados: {caminho_arquivo}")
        except Exception as erro:
            print(f"‚ùå Erro ao exportar resultados: {erro}")

    def _exportar_para_excel(self, dataframe, caminho_arquivo):
        """
        Exporta resultados completos para Excel com m√∫ltimas abas

        Args:
            dataframe (pd.DataFrame): DataFrame com resultados
            caminho_arquivo (str): Caminho para salvar o arquivo Excel
        """
        try:
            with pd.ExcelWriter(caminho_arquivo, engine='openpyxl') as escritor:
                # Aba com todos os dados
                dataframe.to_excel(escritor, sheet_name='Dados_Completos', index=False)

                # Aba com ranking WSM
                if 'score_wsm' in dataframe.columns:
                    ranking_wsm = dataframe.nlargest(50, 'score_wsm')[
                        ['empresa', 'ticker', 'subsetor', 'score_wsm', 'score_wsm_penalidade', 'margem_graham', 'margem_barsi']
                    ]
                    ranking_wsm.to_excel(escritor, sheet_name='Ranking_WSM', index=False)

                # Aba com oportunidades por metodologia
                oportunidades = dataframe[
                    (dataframe['margem_seguranca_graham'] > 0) |
                    (dataframe['margem_seguranca_barsi'] > 0) |
                    (dataframe['margem_seguranca_pl_setor'] > 0)
                    ]
                oportunidades.to_excel(escritor, sheet_name='Oportunidades', index=False)

            print(f"üìä Dados exportados para Excel: {caminho_arquivo}")
        except Exception as erro:
            print(f"‚ùå Erro ao exportar para Excel: {erro}")

    def _exibir_resumo_execucao(self, dataframe):
        """
        Exibe resumo executivo da an√°lise realizada

        Args:
            dataframe (pd.DataFrame): DataFrame com resultados da an√°lise
        """
        print("\n" + "=" * 60)
        print("üìã RESUMO EXECUTIVO DA AN√ÅLISE")
        print("=" * 60)

        total_empresas = len(dataframe)
        empresas_margem_graham = (dataframe['margem_seguranca_graham'] > 0).sum()
        empresas_margem_barsi = (dataframe['margem_seguranca_barsi'] > 0).sum()
        empresas_margem_pl_setor = (dataframe['margem_seguranca_pl_setor'] > 0).sum()

        print(f"üìä Total de empresas analisadas: {total_empresas:,}")
        print(f"üéØ Oportunidades identificadas:")
        print(f"   ‚Ä¢ Metodologia Graham: {empresas_margem_graham} empresas")
        print(f"   ‚Ä¢ Metodologia Barsi: {empresas_margem_barsi} empresas")
        print(f"   ‚Ä¢ P/L Descontado: {empresas_margem_pl_setor} empresas")

        # Empresas com m√∫ltiplas metodologias indicando oportunidade
        oportunidades_multiplas = (
                (dataframe['margem_seguranca_graham'] > 0) &
                (dataframe['margem_seguranca_barsi'] > 0)
        ).sum()

        if oportunidades_multiplas > 0:
            print(f"üíé Oportunidades consolidadas: {oportunidades_multiplas} empresas")

        print("=" * 60)

    def executar_analise_completa(self):
        """M√©todo principal que executa o fluxo completo de an√°lise"""
        print("üöÄ INICIANDO SISTEMA DE AN√ÅLISE FUNDAMENTALISTA")
        print("=" * 70)

        # Processar argumentos
        argumentos = self._processar_argumentos()
        quantidade_rankings = argumentos.quantidade_rankings

        print("‚öôÔ∏è  Configura√ß√µes da an√°lise:")
        print(f"   ‚Ä¢ Atualizar dados: {'SIM' if argumentos.atualizar_dados else 'N√ÉO'}")
        print(f"   ‚Ä¢ Apenas visualiza√ß√µes: {'SIM' if argumentos.apenas_visualizacoes else 'N√ÉO'}")
        print(f"   ‚Ä¢ Empresas no ranking: {quantidade_rankings}")
        print(f"   ‚Ä¢ Exportar dados: {'SIM' if argumentos.exportar_dados else 'N√ÉO'}")

        # Carregar dados fundamentais
        print("\nüì• Carregando dados fundamentais...")
        usar_cache = not argumentos.atualizar_dados
        dados_fundamentais = self.provedor_dados.carregar_dados_fundamentais(usar_cache=usar_cache)

        if dados_fundamentais is None or dados_fundamentais.empty:
            print("‚ùå ERRO: N√£o foi poss√≠vel carregar os dados fundamentais")
            return

        print(f"‚úÖ Dados carregados: {len(dados_fundamentais)} ativos encontrados")

        # Aplicar filtros de exclus√£o
        tickers_excluir = self._carregar_lista_exclusoes()
        if tickers_excluir:
            dados_fundamentais = dados_fundamentais[~dados_fundamentais['ticker'].isin(tickers_excluir)]
            print(f"‚úÖ Filtros aplicados: {len(dados_fundamentais)} ativos ap√≥s exclus√µes")

        # Aplicar metodologias de valuation (se necess√°rio)
        if argumentos.apenas_visualizacoes:
            dados_analise = dados_fundamentais
            print("üìä Modo apenas visualiza√ß√µes - usando dados existentes")
        else:
            dados_analise = self._aplicar_metodologias_valuation(dados_fundamentais)
            # Salvar dataset enriquecido
            caminho_dataset = f"output/dados/analises/dataset_enriquecido_{datetime.now().strftime('%Y%m%d')}.csv"
            dados_analise.to_csv(caminho_dataset, index=False)
            print(f"üíæ Dataset enriquecido salvo: {caminho_dataset}")

        # Exibir resumo inicial
        self._exibir_resumo_execucao(dados_analise)

        # Executar an√°lise WSM
        dados_com_scores, ranking_empresas = self._executar_analise_fundamentalista_wsm(
            dados_analise, quantidade_rankings
        )

        # Preparar dados para visualiza√ß√£o
        dados_visualizacao = self._preparar_dados_visualizacao(dados_analise, dados_com_scores)

        # Mostra todas as colunas com os primeiros registros
        # pd.set_option('display.max_columns', None)
        # print(dados_visualizacao.head())

        # Gerar visualiza√ß√µes
        figuras = self._gerar_visualizacoes_completas(
            dados_visualizacao, quantidade_rankings, argumentos.apenas_visualizacoes
        )

        # Exportar dados se solicitado
        if argumentos.exportar_dados:
            caminho_excel = f"output/dados/analises/relatorio_completo_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
            self._exportar_para_excel(dados_visualizacao, caminho_excel)

        # Finaliza√ß√£o
        print("\n" + "=" * 70)
        print("‚úÖ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print("=" * 70)
        print("üìà Para visualizar os gr√°ficos, feche as janelas do matplotlib")
        print("üíæ Relat√≥rios salvos em: output/dados/analises/")
        print("üñºÔ∏è  Visualiza√ß√µes salvas em: output/graficos/")

        # Exibir gr√°ficos
        if figuras:
            plt.show()
        else:
            print("‚ö†Ô∏è Nenhuma visualiza√ß√£o gerada para exibi√ß√£o")

    def _preparar_dados_visualizacao(self, dados_originais, dados_wsm):
        """
        Prepara DataFrame unificado para visualiza√ß√£o

        Args:
            dados_originais (pd.DataFrame): Dados com metodologias tradicionais
            dados_wsm (pd.DataFrame): Dados com scores WSM

        Returns:
            pd.DataFrame: DataFrame unificado para visualiza√ß√£o
        """
        dados_visualizacao = dados_originais.copy()

        # Integrar scores WSM se dispon√≠veis
        if 'score_wsm' in dados_wsm.columns:
            scores_wsm = dados_wsm[['ticker', 'score_wsm' ,'score_wsm_penalidade']].drop_duplicates()
            dados_visualizacao = dados_visualizacao.merge(scores_wsm, on='ticker', how='left')
            print("‚úÖ Scores WSM integrados para visualiza√ß√£o")

        # Verificar integridade dos dados
        colunas_verificar = [
            'margem_seguranca_graham', 'margem_seguranca_barsi',
            'margem_seguranca_pl_setor', 'score_wsm', 'score_wsm_penalidade'
        ]

        print("\nüîç VERIFICA√á√ÉO DE INTEGRIDADE DOS DADOS:")
        for coluna in colunas_verificar:
            if coluna in dados_visualizacao.columns:
                dados_validos = dados_visualizacao[coluna].notna().sum()
                print(f"   ‚úÖ {coluna}: {dados_validos}/{len(dados_visualizacao)} valores v√°lidos")
            else:
                print(f"   ‚ùå {coluna}: COLUNA AUSENTE")

        return dados_visualizacao


def main():
    """Fun√ß√£o principal de inicializa√ß√£o do sistema"""
    try:
        sistema_analise = SistemaAnaliseFundamentalista()
        sistema_analise.executar_analise_completa()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è An√°lise interrompida pelo usu√°rio")
    except Exception as erro:
        print(f"\n‚ùå ERRO CR√çTICO: {erro}")
        print("Por favor, verifique a configura√ß√£o e tente novamente")


if __name__ == "__main__":
    main()